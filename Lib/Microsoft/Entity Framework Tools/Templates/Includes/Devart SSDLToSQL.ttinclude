<# 
// Entity Framework T4 include template for Microsoft Entity Designer SQL script generation.
// Copyright (c) 2009-2010 Devart. All rights reserved.
#>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Metadata.Edm" #>
<#@ import namespace="Microsoft.Data.Entity.Design.DatabaseGeneration" #>
<#@ import namespace="System.Runtime.Remoting.Messaging" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#+
	#region SqlScriptGenerator

	public abstract class SqlScriptGenerator : SqlGenerator {

		private string edmxPath;
		private string databaseName;
		private StoreItemCollection existingStore;
		private StoreItemCollection store;
		private Version targetVersion;
		private Dictionary<String, int> identifiers = new Dictionary<string, int>();

		public SqlScriptGenerator(TextTransformation writer, GeneratorOptions options)
			: base (writer, options) {

		}

		public virtual void Execute() {

#>
-- ------------------------------------------------------------------------------
-- This is auto-generated SQL script.
-- ------------------------------------------------------------------------------
-- This DDL was generated by '<#= options.TemplateName #>' template.
-- SQL is generated on: <#= DateTime.Now #>
<#+
			if (!String.IsNullOrEmpty(EdmxPath)) {
#>
-- Generated from EDMX file: <#= EdmxPath #>
<#+
			}
#>
-- ------------------------------------------------------------------------------

<#+
			// Start generation
			ScriptStartBlock();

			// Set current database/schema
			if (vendor.StorageContainerChangingSupported)
				SetCurrentDatabase(DatabaseName);

			// Create schemas
			if (options.DatabaseSchemaCreation && vendor.DatabaseSchemasSupported) {
				foreach (string schemaName in (from entitySet in GetTableEntitySets(Store) select GetTableSchemaName(entitySet)).Distinct())
					CreateSchema(schemaName);
			}

			if (options.ExistingStorageDeletion) {
				if (!InitExistingStore()) {
#>
-- Warning: There were errors validating the existing SSDL. Drop statements
-- will not be generated.
<#+
				}

				// Drop existing foreign keys
				if (vendor.ForeignKeysSupported && options.ExplicitForeignKeyDeletion) {
#>

-- ------------------------------------------------------------------------------
-- Dropping existing foreign keys
-- ------------------------------------------------------------------------------
<#+
					foreach (AssociationSet associationSet in ExistingStore.GetAllAssociationSets())
						DropForeignKey(associationSet);
				}

				// Drop existing tables
				IEnumerable<EntitySet> existingEntitySetCollection = GetTableEntitySets(ExistingStore);
				if (existingEntitySetCollection.Count() > 0) {
#>

-- ------------------------------------------------------------------------------
-- Dropping existing tables
-- ------------------------------------------------------------------------------

<#+
					foreach (EntitySet entitySet in existingEntitySetCollection)
						DropTable(entitySet);
				}
			}

			// Create tables
    		IEnumerable<EntitySet> entitySetCollection = GetTableEntitySets(Store);
			if (entitySetCollection.Count() > 0) {	
#>

-- ------------------------------------------------------------------------------
-- Creating all tables
-- ------------------------------------------------------------------------------
<#+
				foreach (EntitySet entitySet in entitySetCollection)
					CreateTable(entitySet);
			}

			// Create foreign keys
			if (vendor.ForeignKeysSupported && Store.GetAllAssociationSets().Count() > 0) {
#>

-- ------------------------------------------------------------------------------
-- Creating all foreign keys
-- ------------------------------------------------------------------------------
<#+
				foreach (AssociationSet associationSet in Store.GetAllAssociationSets())
					CreateForeignKey(associationSet);
			}

			// Finish generation
			ScriptFinishBlock();
		}

		public virtual void ScriptStartBlock() {

		}

		public virtual void ScriptFinishBlock() {

			TransformText();
		}

		protected override string GetForeignKeyName(ReferentialConstraint constraint) {

			string name = base.GetForeignKeyName(constraint);
			return GetTruncatedIdentifierIfNeed(name);
		}

		protected override string GetPrimaryKeyName(string tableName) {

			string name = base.GetPrimaryKeyName(tableName);
			return GetTruncatedIdentifierIfNeed(name);
		}

		protected virtual void SaveTableNameIdentifier(EntitySet entitySet) {

			GetTruncatedIdentifierIfNeed(entitySet.GetTableName());
		}

		protected virtual string GetTruncatedIdentifierIfNeed(string name) {

			if (vendor.IdentifierMaxLength <= 0)
			  return name;

			if (name.Length > vendor.IdentifierMaxLength)
				name = name.Substring(0, vendor.IdentifierMaxLength);

			if (!identifiers.Keys.Contains(name)) {
				identifiers.Add(name, 0);
				return name;
			}

			int count = identifiers[name] = identifiers[name] + 1;

			for (int i = 1; i < 7; i++) {
				if (count < Math.Pow(10, i))
					return name.Substring(0, vendor.IdentifierMaxLength - i) + count.ToString();
			}

			return name;
		}

		protected T GetCallContextData<T>(string identity) where T : class {

			return System.Runtime.Remoting.Messaging.CallContext.GetData(identity) as T;
		}

		protected bool InitExistingStore() {

			IList<EdmSchemaError> errors;
			this.existingStore = EdmExtension.CreateStoreItemCollection(GetCallContextData<string>(EdmConstants.existingSsdlInputName), TargetVersion, out errors);
			return (errors.Count == 0);
		}

		protected string EdmxPath {
			get {
				if (this.edmxPath == null)
					this.edmxPath = GetCallContextData<string>(EdmParameterBag.ParameterName.EdmxPath.ToString());
				return this.edmxPath;
			}
		}

		protected string DatabaseName {
			get {
				if (this.databaseName == null)
					this.databaseName = GetCallContextData<string>(EdmParameterBag.ParameterName.DatabaseName.ToString());
				return this.databaseName;
			}
		}

		protected StoreItemCollection ExistingStore {
			get {
				return this.existingStore;
			}
		}

		protected StoreItemCollection Store {
			get {
				if (store == null)
					this.store = EdmExtension.CreateAndValidateStoreItemCollection(GetCallContextData<string>(EdmConstants.ssdlOutputName), this.TargetVersion, true, false);
				return this.store;
			}
		}

		protected Version TargetVersion {
			get {
				if (this.targetVersion == null) 
					this.targetVersion = GetCallContextData<Version>(EdmParameterBag.ParameterName.TargetVersion.ToString());
				return this.targetVersion;
			}
		}
	}

	#endregion

	#region SqlGenerator

	public abstract class SqlGenerator : TextTransformation {

		protected TextTransformation writer;
		protected GeneratorOptions options;
		protected SqlVendor vendor;

		public SqlGenerator(TextTransformation writer, GeneratorOptions options) {

			this.writer = writer;
			this.options = options;
			this.vendor = CreateVendor();
		}

		protected abstract SqlVendor CreateVendor();

		#region Databases/Schemas

		public virtual void SetCurrentDatabase(string databaseName) {

			throw new NotImplementedException();
		}

		public virtual void CreateSchema(string schemaName) {

			throw new NotImplementedException();
		}

		#endregion

		#region Tables

		public virtual void CreateTable(EntitySet entitySet) {

#>

-- Table <#= Quote(entitySet) #>
<#+
			WriteCreateTable(Quote(entitySet));
#> ( <#+
			for (int i = 0; i < entitySet.ElementType.Properties.Count; i++) {
				EdmProperty property = entitySet.ElementType.Properties[i];
				WriteColumnDefinition(property);
				if (i < entitySet.ElementType.Properties.Count - 1) {
#>,<#+
				}
			}

			if (!options.NamedPrimaryKeyCreation)
				WritePrimaryKey(entitySet.ElementType.GetKeyProperties());
#>

)<#= GetCreateTableOptions() #>;
<#+
			if (options.NamedPrimaryKeyCreation)
				WriteNamedPrimaryKeyCreation(entitySet);

			TransformText();
		}

		protected virtual void WriteCreateTable(string identifier) {

#>
CREATE TABLE <#= identifier #> <#+
		}

		protected virtual string GetCreateTableOptions() {

			return String.Empty;
		}

		public virtual void DropTable(EntitySet entitySet) {

			WriteDropTable(Quote(entitySet));
			TransformText();
		}

		protected abstract void WriteDropTable(string identifier);

		#endregion
		
		#region Columns

		protected virtual string GetColumnList(IEnumerable<EdmProperty> properties) {

			StringBuilder builder = new StringBuilder();
			bool first = true;

			foreach (EdmProperty property in properties) {

				if (first)
					first = false;
				else
					builder.Append(", ");

				builder.Append(Quote(GetValidIdentifier(property.Name)));
			}

			return builder.ToString();
		}

		protected virtual void WriteColumnDefinition(EdmProperty property) {

#>

    <#= Quote(GetValidIdentifier(property.Name) )#> <#= GetDbType(property) #> <#= GetNullable(property.Nullable) #><#+

			string trailer = GetColumnTrailer(property);
			if (!String.IsNullOrEmpty(trailer)) {
#> <#= trailer #><#+
			}
		}

		protected virtual string GetDbType(EdmProperty property) {

		  return property.ToStoreType();
		}

		protected virtual string GetNullable(bool nullable) {

			return (nullable ? "" : "NOT ") + "NULL";
		}

		protected virtual string GetColumnTrailer(EdmProperty property) {

			return string.Empty;
		}

		#endregion

		#region Primary keys

		protected virtual void WritePrimaryKey(IEnumerable<EdmProperty> properties) {

			if (properties.Count() > 0) {
#>,
    PRIMARY KEY (<#= GetColumnList(properties) #>)<#+
			}
		}

		protected virtual void WriteNamedPrimaryKeyCreation(EntitySet entitySet) {

#>
ALTER TABLE <#= Quote(entitySet) #>
ADD CONSTRAINT <#= Quote(GetValidIdentifier(GetPrimaryKeyName(entitySet.GetTableName()))) #> PRIMARY KEY (<#= GetColumnList(entitySet.ElementType.GetKeyProperties()) #>);
<#+
		}

		protected virtual string GetPrimaryKeyName(string tableName) {

			return "PK_" + tableName;
		}

		#endregion

		#region Foreign keys

		public virtual void CreateForeignKey(AssociationSet associationSet) {

			ReferentialConstraint constraint = associationSet.ElementType.ReferentialConstraints.Single();
			AssociationSetEnd dependentSetEnd = associationSet.AssociationSetEnds.Where(ase => ase.CorrespondingAssociationEndMember == constraint.ToRole).Single();
			AssociationSetEnd principalSetEnd = associationSet.AssociationSetEnds.Where(ase => ase.CorrespondingAssociationEndMember == constraint.FromRole).Single();
			string schemaName = GetValidIdentifier(GetTableSchemaName(dependentSetEnd.EntitySet));
			string dependentTableName = GetValidIdentifier(dependentSetEnd.EntitySet.GetTableName());
			string principalTableName = GetValidIdentifier(principalSetEnd.EntitySet.GetTableName());

			WriteCreateForeignKey(constraint, schemaName, dependentTableName, principalTableName);
			TransformText();
		}

		protected virtual void WriteCreateForeignKey(ReferentialConstraint constraint, string schemaName, string dependentTableName, string principalTableName) {

#>

ALTER TABLE <#= Quote(schemaName, dependentTableName) #>
ADD CONSTRAINT <#= Quote(GetForeignKeyName(constraint)) #> FOREIGN KEY (<#= GetColumnList(constraint.ToProperties) #>)
    REFERENCES <#= Quote(schemaName, principalTableName) #> (<#= GetColumnList(constraint.FromProperties) #>)<#+
	if (vendor.OnDeleteSupported || vendor.OnUpdateSupported) { #>

    <#+
		if (vendor.OnDeleteSupported) {	#>ON DELETE <#= GetDeleteAction(constraint) #> <#+	}
		if (vendor.OnUpdateSupported) { #>ON UPDATE NO ACTION<#+ }
	}
#>;
<#+
		}

		protected virtual string GetForeignKeyName(ReferentialConstraint constraint) {

			string prefix = !constraint.FromRole.DeclaringType.Name.StartsWith("FK_", StringComparison.InvariantCultureIgnoreCase) ? "FK_" : String.Empty;
			return prefix + constraint.FromRole.DeclaringType.Name;
		}

		protected virtual string GetDeleteAction(ReferentialConstraint constraint) {

			switch (constraint.FromRole.DeleteBehavior) {
				case OperationAction.Cascade:
					return "CASCADE";
				case OperationAction.None:
				default:
					return "NO ACTION";
			}
		}

		public virtual void DropForeignKey(AssociationSet associationSet) {

			ReferentialConstraint constraint = associationSet.ElementType.ReferentialConstraints.Single();
			AssociationSetEnd dependentSetEnd = associationSet.AssociationSetEnds.Where(ase => ase.CorrespondingAssociationEndMember == constraint.ToRole).Single();
			string schemaName = GetValidIdentifier(GetTableSchemaName(dependentSetEnd.EntitySet));
			string dependentTableName = GetValidIdentifier(dependentSetEnd.EntitySet.GetTableName());

			WriteDropForeignKey(Quote(schemaName, dependentTableName), Quote(GetForeignKeyName(constraint)));
			TransformText();
		}

		protected virtual void WriteDropForeignKey(string tableName, string fkName) {

#>
ALTER TABLE <#= tableName #>
<#= GetDropForeignKeyString() #> <#= fkName #>;
<#+
		}

		protected virtual string GetDropForeignKeyString() {

			throw new NotImplementedException();
		}

		#endregion

		#region Quoting

		public virtual string GetValidIdentifier(string identifier) {

			if (vendor.IdentifierMaxLength > 0 && identifier.Length > vendor.IdentifierMaxLength)
				throw new InvalidOperationException(String.Format("Identifier name '{0}' is too long. Maximum length is {1}.", identifier, vendor.IdentifierMaxLength));

			return identifier;
		}

		protected virtual string Quote(string schemaName, string objectName) {

			StringBuilder identifier = new StringBuilder();

			if (vendor.DatabaseSchemasSupported && !String.IsNullOrEmpty(schemaName)) {
				identifier.Append(Quote(schemaName) + ".");
			}

			if (!String.IsNullOrEmpty(objectName)) {
				identifier.Append(Quote(objectName));
			}
			else
				identifier.Clear();

			return identifier.ToString();
		}

		protected virtual string Quote(EntitySet entitySet) {

			string schemaName = GetValidIdentifier(GetTableSchemaName(entitySet));
			string tableName = GetValidIdentifier(entitySet.GetTableName());
			return Quote(schemaName, tableName);
		}

		public abstract string Quote(string identifier);

		#endregion

		public override string TransformText() {

			string text = GenerationEnvironment.ToString();
			GenerationEnvironment.Clear();
			writer.Write(text);
			return text;
		}

		public static string GetTableSchemaName(EntitySet entitySet) {

			MetadataProperty property;
			if (entitySet.MetadataProperties.TryGetValue("Schema", false, out property))
				if (property != null && property.Value != null) {
					string schemaName = property.Value as string;
					if (schemaName != null && !string.IsNullOrEmpty(schemaName))
						return schemaName;
				}

			return null;
		}

		public static IEnumerable<EntitySet> GetTableEntitySets(ItemCollection itemCollection) {

			List<EntitySet> list = new List<EntitySet>();
			EntityContainer container = itemCollection.GetItems<EntityContainer>().FirstOrDefault<EntityContainer>();

			if (container != null)
				list.AddRange(container.BaseEntitySets.OfType<EntitySet>().Where(entity => IsTable(entity)));

			return list;
		}

		public static bool IsTable(MetadataItem item) {

			MetadataProperty entityType;
			item.MetadataProperties.TryGetValue("http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator:Type", false, out entityType);

			if (entityType != null && entityType.Value != null && entityType.Value is string && (entityType.Value as string) == "Tables") {

				MetadataProperty definingQuery;
				item.MetadataProperties.TryGetValue("DefiningQuery", false, out definingQuery);
				if (!(definingQuery != null && definingQuery.Value != null && definingQuery.Value is string))
					return true;
			}

			return false;
		}
	}

	#endregion

	#region GeneratorOptions

	public class GeneratorOptions {

		public GeneratorOptions() {

			ExistingStorageDeletion = false;
			ExplicitForeignKeyDeletion = false;
			NamedPrimaryKeyCreation = false;
			DatabaseSchemaCreation = false;
		}

		public virtual bool ExistingStorageDeletion { get; set; }
		public virtual bool ExplicitForeignKeyDeletion { get; set; }
		public virtual bool NamedPrimaryKeyCreation { get; set; }
		public virtual bool DatabaseSchemaCreation { get; set; }
		public virtual string TemplateName { get; set; }
	}

	#endregion

	#region SqlVendor

	public abstract class SqlVendor {

		public SqlVendor() {

			StorageContainerChangingSupported = false;
			DatabaseSchemasSupported = false;
			ForeignKeysSupported = false;
			OnDeleteSupported = false;
			OnUpdateSupported = false;
			IdentifierMaxLength = -1;
		}

		public virtual bool DatabaseSchemasSupported { get; set; }
		public virtual bool StorageContainerChangingSupported { get; set; }
		public virtual bool ForeignKeysSupported { get; set; }
		public virtual bool OnDeleteSupported { get; set; }
		public virtual bool OnUpdateSupported { get; set; }
		public virtual int IdentifierMaxLength { get; set; }
	}

	#endregion
#>